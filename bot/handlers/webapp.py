"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
"""
import json
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Filter

from utils.database import Database
from config import Config

router = Router()


class WebAppDataFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å web_app_data"""
    
    async def __call__(self, message: Message) -> bool:
        return message.web_app_data is not None


@router.message(WebAppDataFilter())
async def handle_webapp_data(message: Message, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
        data = json.loads(message.web_app_data.data)
        command = data.get("command")
        
        if command == "finish_quiz":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å
            quiz_id = data.get("quiz_id")
            
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!\n\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                reply_markup=message.reply_markup
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–ø—Ä–æ—Å–∞
            quiz = await db.get_quiz_by_id(quiz_id)
            if quiz:
                creator_id = quiz['creator_id']
        
        elif command == "close_webapp":
            # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebApp
            await message.answer("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
